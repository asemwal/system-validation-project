sort 	
	Sensor = struct  East | West | Center | None;
	LightStatus = struct LightOn|LightOff;
	BellStatus = struct BellOn|BellOff;
	BarrierDirection = struct Up|Down;
	TrackID = struct TrackA|TrackB;
	Direction = struct EastToWest|WestToEast;

map	isOccupied : Set(Sensor) -> Bool;
	isTrackA : TrackID -> Bool;
	isNone: Sensor -> Bool;
	isOnCrossing: Sensor -> Bool;
	isEntering: Sensor # Set(Sensor) -> Bool;
	isLeaving: Sensor # Set(Sensor) -> Bool;

var	s: Sensor;
	ss: Set(Sensor);

eqn	isOccupied(ss) = !(ss == {});
	isTrackA(TrackA) = true;
	isTrackA(TrackB) = false;
	isNone(None) = true;
	isNone(s) = false;
	isOnCrossing(Center) = true;
	isOnCrossing(s) = false;
	isEntering(East, ss) = (ss == {});
	isEntering(West, ss) = (ss == {});
	isEntering(s, ss) = false;
	isLeaving(s, ss) = false;	
	isLeaving(East, ss) = (ss == {West, Center});
	isLeaving(West, ss) = (ss == {East, Center});
	isLeaving(s, ss) = false;	
	
act 	% External
	lightSetPower : LightStatus;
	bellSetPower : BellStatus;
	barrierMove,barrierMove2 : BarrierDirection;
	sensorTrainEnter; % todo
	sensorTrainLeave; % todo
	%sensorTrainOnCrossing; % todo

	% Internal
	setLightSend: LightStatus;
	setLightReceive: LightStatus;

	setBellSend, setBellReceive, setBell: BellStatus;
	
	moveBarrierSend, moveBarrierReceive, moveBarrier: BarrierDirection;
	
	% Multiaction
	setLight: LightStatus;
	sensorTrainCenterA: Bool;
	sensorTrainCenterB: Bool;
	sensorTrainEnterA: Bool;
	sensorTrainEnterB: Bool;
	sensorTrainLeaveA : Bool;
	sensorTrainLeaveB : Bool;

	idle;


proc	
	Sensor(trackA: Set(Sensor), trackB: Set(Sensor)) = sum sA: Sensor, sB: Sensor . (
	(isNone(sA) 		&& isNone(sB)) 		-> idle . Sensor(trackA, trackB)
	+(isNone(sA) 		&& isOnCrossing(sB)) 	-> sensorTrainCenterB(true) . Sensor(trackA, trackB + {sB})
	+(isNone(sA) 		&& isEntering(sB, trackB)) 	-> sensorTrainEnterB(true).EnteringAlone(TrackB, sB, trackA, trackB)
	+(isNone(sA) 		&& isLeaving(sB, trackB)) 	-> sensorTrainLeaveB(true).LeavingAlone(TrackB, sB, trackA, trackB)
	+(isOnCrossing(sA) 		&& isNone(sB)) 		-> sensorTrainCenterA(true) . Sensor(trackA + {sA}, trackB)
	+(isOnCrossing(sA) 		&& isOnCrossing(sB)) 	-> (sensorTrainCenterA(true).sensorTrainCenterB(true) + sensorTrainCenterB(true).sensorTrainCenterA(true)) . Sensor(trackA + {sA}, trackB + {sB})
	+(isOnCrossing(sA) 		&& isEntering(sB, trackB)) 	-> (sensorTrainCenterA(true).sensorTrainEnterB(true) + sensorTrainEnterB(true).sensorTrainCenterA(true)).EnteringAlone(TrackB, sB, trackA + {sA}, trackB)
	+(isOnCrossing(sA) 		&& isLeaving(sB, trackB)) 	-> (sensorTrainCenterA(true).sensorTrainLeaveB(true)+sensorTrainLeaveB(true).sensorTrainCenterA(true)).LeavingAlone(TrackB, sB, trackA + {sA}, trackB)
	+(isEntering(sA, trackA) 	&& isNone(sB)) 		-> (sensorTrainEnterA(true)).EnteringAlone(TrackA, sA, trackA, trackB)
	+(isEntering(sA, trackA) 	&& isOnCrossing(sB)) 	-> (sensorTrainCenterB(true).sensorTrainEnterA(true)+sensorTrainEnterA(true).sensorTrainCenterB(true)).EnteringAlone(TrackA, sA, trackA, trackB  )
	+(isEntering(sA, trackA) 	&& isEntering(sB, trackB)) 	-> (sensorTrainEnterA(true).sensorTrainEnterB(true)+sensorTrainEnterB(true).sensorTrainEnterA(true)).EnteringTogether(sA, sB, trackA, trackB)
 	+(isEntering(sA, trackA) 	&& isLeaving(sB, trackB)) 	-> (sensorTrainEnterA(true).sensorTrainLeaveB(true) +sensorTrainLeaveB(true).sensorTrainEnterA(true)).EnteringAndLeaving(TrackA, sA, sB,trackA, trackB)
	+(isLeaving(sA, trackA) 	&& isNone(sB)) 		-> sensorTrainLeaveA(true).LeavingAlone(TrackA, sA, trackA, trackB)
	+(isLeaving(sA, trackA) 	&& isOnCrossing(sB)) 	-> (sensorTrainLeaveA(true).sensorTrainCenterB(true)  + sensorTrainCenterB(true).sensorTrainLeaveA(true) ).	LeavingAlone(TrackA, sA, trackA, trackB + {sB})
 	+(isLeaving(sA, trackA) 	&& isEntering(sB, trackB)) 	->  (sensorTrainLeaveA(true) .sensorTrainEnterB(true) + sensorTrainEnterB(true). sensorTrainLeaveA(true) ).EnteringAndLeaving(TrackB, sA, sB,trackA, trackB)
 	+(isLeaving(sA, trackA) 	&& isLeaving(sB, trackB)) 	-> (sensorTrainLeaveA(true).sensorTrainLeaveB(true)  + sensorTrainLeaveB(true).sensorTrainLeaveA(true) ). LeavingTogether
	
	)
;

	EnteringAlone(trackId: TrackID, s: Sensor, trackA: Set(Sensor), trackB: Set(Sensor)) =
		isTrackA(trackId) -> (
			% (isOccupied(trackA)) -> ( delta ) % check obsolete i presume
			(isOccupied(trackB)) -> idle . Sensor(trackA + {s}, trackB)
					<> setLightSend(LightOn) . Sensor(trackA + {s}, trackB)
		) <> (
			% (isOccupied(trackB)) -> delta
			isOccupied(trackA) -> idle . Sensor(trackA, trackB + {s})
					<> setLightSend(LightOn) . Sensor(trackA, trackB  + {s})
		)
	;


	LeavingAlone(trackId: TrackID, s: Sensor, trackA: Set(Sensor), trackB: Set(Sensor)) = 
		(isTrackA(trackId)) -> (
			(isOccupied(trackB)) -> idle . Sensor({}, trackB)
					<> moveBarrierSend(Up) . Sensor({}, trackB)
		) <> (
			(isOccupied(trackA)) -> idle . Sensor(trackA, {})
					<> moveBarrierSend(Up) . Sensor(trackA, {})
		)
	;

 	EnteringTogether(sA: Sensor, sB: Sensor, trackA: Set(Sensor), trackB: Set(Sensor)) = setLightSend(LightOn).Sensor(trackA+{sA} , trackB+{sB});
 	

	EnteringAndLeaving(trackId: TrackID, sA: Sensor, sB: Sensor, trackA: Set(Sensor), trackB: Set(Sensor)) = 
		(isTrackA(trackId)) -> ( idle.Sensor(trackA+{sA},  trackB-{sB})) +
			(!isTrackA(trackId))-> ( idle.Sensor(trackA-{sA},  trackB+{sB}));
 	
	LeavingTogether = moveBarrierSend(Up).Sensor({},{});


	Light = 
		setLightReceive(LightOn). lightSetPower(LightOn) . setBellSend(BellOn) . Light
		+ 
		setLightReceive(LightOff). lightSetPower(LightOff) . Light
		;



	Bell =
		setBellReceive(BellOn) . bellSetPower(BellOn) . moveBarrierSend(Down) . Bell
		+ 
		setBellReceive(BellOff) . bellSetPower(BellOff) . setLightSend(LightOff) . Bell
		;


	Barrier = 
		moveBarrierReceive(Up) . barrierMove(Up). barrierMove2(Up). setBellSend(BellOff)  . Barrier
		+
		moveBarrierReceive(Down) . barrierMove(Down) . Barrier
		;
		

init 
	allow(
		{
		lightSetPower,
		bellSetPower,
		barrierMove ,
		sensorTrainEnter,
		sensorTrainLeave,
		%sensorTrainOnCrossing,
		setLightSend,
		setLightReceive,
		setBellSend, setBellReceive, setBell,
		moveBarrierSend, moveBarrierReceive, moveBarrier,
		setLight,
		idle,
		 sensorTrainCenterA
		, sensorTrainCenterB
		, sensorTrainEnterA 
		, sensorTrainEnterB 
		, sensorTrainLeaveA 
		,sensorTrainLeaveB 


		}, 
		comm(
			{
			setLightSend|setLightReceive->setLight,
			setBellSend|setBellReceive->setBell,
			moveBarrierSend|moveBarrierReceive->moveBarrier
			},
			( sensorTrainCenterA(false) + sensorTrainCenterB(false) + sensorTrainEnterA(false) + sensorTrainEnterB(false) + sensorTrainLeaveA(false) +sensorTrainLeaveB(false) )||(Sensor({}, {}) || Light || Bell || Barrier  )
		)	
	);