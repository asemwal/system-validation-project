sort 	
	Sensor = struct  East | West | Center | None;
	LightStatus = struct LightOn|LightOff;
	BellStatus = struct BellOn|BellOff;
	BarrierDirection = struct Up|Down;
	TrackID = struct TrackA|TrackB;
	Direction = struct EastToWest|WestToEast;

map	isOccupied : Sensor # Set(Sensor) -> Bool;
	isTrackA : TrackID -> Bool;
	isNone: Sensor -> Bool;
	isOnCrossing: Sensor -> Bool;
	isEntering: Sensor # Set(Sensor) -> Bool;
	isLeaving: Sensor # Set(Sensor) -> Bool;

var	s: Sensor;
	ss: Set(Sensor);

eqn	isOccupied(s, ss) = true;
	isTrackA(TrackA) = true;
	isTrackA(TrackB) = false;
	isNone(None) = true;
	isNone(s) = false;
	isOnCrossing(Center) = true;
	isOnCrossing(s) = false;
	isEntering(East, ss) = (ss == {});
	isEntering(West, ss) = (ss == {});
	isEntering(s, ss) = false;
	isLeaving(s, ss) = false;	
	isLeaving(East, ss) = (ss == {West, Center});
	isLeaving(West, ss) = (ss == {East, Center});
	isLeaving(s, ss) = false;	
	
act 	% External
	lightSetPower : LightStatus;
	bellSetPower : BellStatus;
	barrierMove : BarrierDirection;
	sensorTrainEnter; % todo
	sensorTrainLeave; % todo
	%sensorTrainOnCrossing; % todo

	% Internal
	setLightSend: LightStatus;
	setLightReceive: LightStatus;

	setBellSend, setBellReceive, setBell: BellStatus;
	
	moveBarrierSend, moveBarrierReceive, moveBarrier: BarrierDirection;
	
	% Multiaction
	setLight: LightStatus;



proc	Sensor(trackA: Set(Sensor), trackB: Set(Sensor)) = sum sA: Sensor, sB: Sensor . (
	(isNone(sA) 		&& isNone(sB)) 		-> Sensor(trackA, trackB)
	+(isNone(sA) 		&& isOnCrossing(sB)) 	-> Sensor(trackA, trackB + {sB})
	+(isNone(sA) 		&& isEntering(sB, trackB)) 	-> EnteringAlone(TrackB, sB, trackA, trackB)
	+(isNone(sA) 		&& isLeaving(sB, trackB)) 	-> LeavingAlone(TrackB, sB, trackA, trackB)
	+(isOnCrossing(sA) 		&& isNone(sB)) 		-> Sensor(trackA + {sA}, trackB)
	+(isOnCrossing(sA) 		&& isOnCrossing(sB)) 	-> Sensor(trackA + {sA}, trackB + {sB})
	+(isOnCrossing(sA) 		&& isEntering(sB, trackB)) 	-> EnteringAlone(TrackB, sB, trackA + {sA}, trackB)
	+(isOnCrossing(sA) 		&& isLeaving(sB, trackB)) 	-> LeavingAlone(TrackB, sB, trackA + {sA}, trackB)
	+(isEntering(sA, trackA) 	&& isNone(sB)) 		-> EnteringAlone(TrackA, sA, trackA, trackB)
	+(isEntering(sA, trackA) 	&& isOnCrossing(sB)) 	-> EnteringAlone(TrackA, sA, trackA, trackB + {sB})
%TODO	+(isEntering(sA, trackA) 	&& isEntering(sB, trackB)) 	-> EnteringTogether
%TODO	+(isEntering(sA, trackA) 	&& isLeaving(sB, trackB)) 	-> EnteringAndLeaving
	+(isLeaving(sA, trackA) 	&& isNone(sB)) 		-> LeavingAlone(TrackA, sA, trackA, trackB)
	+(isLeaving(sA, trackA) 	&& isOnCrossing(sB)) 	-> LeavingAlone(TrackA, sA, trackA, trackB + {sB})
%TODO	+(isLeaving(sA, trackA) 	&& isEntering(sB, trackB)) 	-> EnteringAndLeaving
%TODO	+(isLeaving(sA, trackA) 	&& isLeaving(sB, trackB)) 	-> LeavingTogether
	)
	;


	EnteringAlone(trackId: TrackID, s: Sensor, trackA: Set(Sensor), trackB: Set(Sensor)) =
		isTrackA(trackId) -> (
			% (isOccupied(trackA)) -> ( delta ) % check obsolete i presume
			(isOccupied(trackB)) -> Sensor(trackA + s, trackB)
					<> setLightSend(LightOn) . Sensor(trackA + s, trackB)
		) <> (
			% (isOccupied(trackB)) -> delta
			isOccupied(trackA) -> Sensor(trackA, trackB + s)
					<> setLightSend(LightOn) . Sensor(trackA, trackB  + s)
		)
	;


	LeavingAlone(trackId: TrackID, s: Sensor, trackA: Set(Sensor), trackB: Set(Sensor)) = 
		(isTrackA(tackId)) -> (
			(isOccupied(trackB)) -> Sensor({}, trackB)
					<> moveBarrierSend(Up) . Sensor({}, trackB)
		) <> (
			(isOccupied(trackA)) -> Sensor(trackA, {})
					<> moveBarrierSend(Up) . Sensor(trackA, {})
		)
	;

% TODO	EnteringTogether = 
% TODO 	EnteringAndLeaving = 
% TODO	LeavingTogether = 


	Light = 
		setLightReceive(LightOn). lightSetPower(LightOn) . setBellSend(BellOn) . Light
		+ 
		setLightReceive(LightOff). lightSetPower(LightOff) . Light
		;



	Bell =
		setBellReceive(BellOn) . bellSetPower(BellOn) . moveBarrierSend(Up) . Bell
		+ 
		setBellReceive(BellOff) . bellSetPower(BellOn) . setLightSend(LightOff) . Bell
		;


	Barrier = 
		moveBarrierReceive(Up) . barrierMove(Up) . Barrier
		+
		moveBarrierReceive(Down) . barrierMove(Down) . setBellSend(BellOn) . Barrier
		;
		

init 
	allow(
		{
		%internal communication
		setLight,
		setBell,
		moveBarrier,
		%external
		lightSetPower,
		bellSetPower,
		barrierMove
		%sensor....
		}, 
		comm(
			{
			setLightSend|setLightReceive->setLight,
			setBellSend|setBellReceive->setBell,
			moveBarrierSend|moveBarrierReceive->moveBarrier
			},
			Sensor({}, {}) || Light || Bell || Barrier
		)	
	);
