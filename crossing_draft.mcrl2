sort 	LightStatus = struct LightOn|LightOff;
	BellStatus = struct BellOn|BellOff;
	BarrierDirection = struct Up|Down;
	Track = struct Track1|Track2;
	Direction = struct EastToWest|WestToEast;

map	isOccupied : Track # Set(Track) -> Bool;
	makeOccupied : Track # Set(Track) -> Set(Track); 
	removeOccupied : Track # Set(Track) -> Set(Track);
	opp: Track -> Track;

var	o: Set(Track);
	t: Track;

eqn	isOccupied(t, o) = t in o;
	makeOccupied(t, o) = {t} + o;
	removeOccupied(t, o) = o - {t};
	opp(Track1) = Track2;
	opp(Track2) = Track1;


	
act 	% External
	lightSetPower : LightStatus;
	bellSetPower : BellStatus;
	barrierMove : BarrierDirection;
	sensorTrainEnter : Track # Direction;
	sensorTrainLeave: Track # Direction;
	%sensorTrainOnCrossing;

	% Internal
	setLightSend;
	setLightReceive;

	setBellSend;
	setBellRecieve;
	
	moveBarrierSend;
	moveBarrierReceive;
	
	

proc	Sensor(active: Set(Sensor)) = sum triggered: Sensor
		% train 1 enters alone (same for train 2)
		(isEntering(t)) -> (
			(isOccupied(track)) -> ( 
				delta
			) (isFree(track)) -> (
				(isFree(opp(track))) -> (
					setLightSend(LightOn) . Sensor(active + triggered)
				) (isOccupied(opp(track))) -> (
					Sensor(active + triggered)
				)
			)
		) 
		% train 1 leaves alone (same for train 2)
		+ (isLeaving(t)) (
			(isOccupied(opp(track))) -> (
				moveBarrierSend(Down) . Sensor(activeSensors - triggeredSensor)
			) (isFree(opp(track))) -> (
				Sensor(activeSensors - triggeredSensor)
			)
		)
		% both trains are entering at the same time
		+ (isEntering(t) && isEntering(opp(t))) ()
		% both trains are leaving at the same time
		+ (isLeaving(t) && isLeaving(opp(t))) ()
		% train 1 enters and train 2 leaves (or vice versa)
		+ (isEntering(t) && isLeaving(opp(2)))
	;

	Light = 
		(setLightReceive(LightOn)) -> (
			lightSetPower(LightOn) . setBellSend(BellOn) . Light
		)
		+ (setLightReceive(LightOff)) -> (
			lightSetPower(LightOff) . Light
		);


	Bell =
		(setBellReceive(BellOn)) -> (
			bellSetPower(BellOn) . moveBarrierSend(Up) . Bell
		)
		+ (setBellReceive(BellOff)) -> (
			bellSetPower(BellOn) . setLightSend(LightOff) . Bell
		);


	Barrier = 
		(moveBarrierReceive(Up)) -> (
			barrierMove(Up) . Barrier
		)
		+
		(moveBarrierReceive(Down)) -> (
			barrierMove(Down) . setBellSend(BellOn) . Barrier
		);
		

init 